stages:
  - dev_build
  ## - dev_test
  - dev_deploy
  - qa_build
  - qa_deploy
  - stg_build
  - stg_deploy
 
dev_build:
  image: node:16
  stage: dev_build
  script:
    - node -v
    - npm cache clean --force
    - npm cache verify
    - npm install --force
    - npm install typescript@4.7.4 -g
    - npm install xlsx
    - tsc -v
    - npm install pm2 -g
    ##- if [ "$CI_COMMIT_REF_NAME" = "release/dev" ]; then cp $DEV_ENV .env; else cp $QA_ENV .env; fi
    ##- if [ "$CI_COMMIT_REF_NAME" = "release/qa" ]; then cp $QA_ENV .env; else cp $STG_ENV .env; fi
    ##- if [ "$CI_COMMIT_REF_NAME" = "release/stg" ]; then cp $STG_ENV .env; else cp $DEV_ENV .env; fi
    - cp $DEV_ENV .env
    - cp .env env
    - ls -la
    - cat .env
    - npm run build
    #- npm run dev
    # Health Check
    #- echo "Performing Health Check..."
    #- 'curl -f -s http://localhost:8001/api/v1/health-check || (echo "Health check failed" && exit 1)'
    # Continue with build and run if health check passes
    - pwd
    - tar -czf plandid_backend_dev_artifact.tar.gz *
  artifacts:
    paths:
    - plandid_backend_dev_artifact.tar.gz
    expire_in: 1 hrs 00 min
  only:
    - release/dev  

# dev_test:
#   stage: dev_test
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   stage: dev_test
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#     GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - sonar-scanner -X -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD
#   only:
#     - dev    

dev_deploy:
  stage: dev_deploy
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - echo "Delploying project..."
    - pwd
    - ls -la 
    - scp -rp plandid_backend_dev_artifact.tar.gz plandid_usr@$DEPLOY_SERVER_IP:/var/www/html/plandid_app/Plandid_backend/dev/
    - ssh plandid_usr@$DEPLOY_SERVER_IP 'bash' < ./scripts/start_dev.sh
    - echo "Deployment complete."
  only:
    - release/dev
 
qa_build:
  image: node:16
  stage: qa_build
  script:
    - node -v
    - npm cache clean --force
    - npm cache verify
    - npm install --force
    - npm install typescript@4.7.4 -g
    - npm install xlsx
    - tsc -v
    - npm install pm2 -g
    ##- if [ "$CI_COMMIT_REF_NAME" = "release/dev" ]; then cp $DEV_ENV .env; else cp $QA_ENV .env; fi
    - cp $QA_ENV .env
    - cp .env env
    - ls -la
    - cat .env
    - npm run build
    - pwd
    - tar -czf plandid_backend_qa_artifact.tar.gz *
  artifacts:
    paths:
    - plandid_backend_qa_artifact.tar.gz
    expire_in: 1 hrs 00 min
  only:
    - release/qa

qa_deploy:
  stage: qa_deploy
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - echo "Delploying project..."
    - pwd
    - ls -la 
    - scp -rp plandid_backend_qa_artifact.tar.gz plandid_usr@$DEPLOY_SERVER_IP:/var/www/html/plandid_app/Plandid_backend/qa/
    - ssh plandid_usr@$DEPLOY_SERVER_IP 'bash' < ./scripts/start_qa.sh
    - echo "Deployment complete."
  only:
    - release/qa

 
stg_build:
  image: node:16
  stage: stg_build
  script:
    - node -v
    - npm cache clean --force
    - npm cache verify
    - npm install --force
    - npm install typescript@4.7.4 -g
    - npm install xlsx
    - tsc -v
    - npm install pm2 -g
    - cp $STG_ENV .env
    - cp .env env
    - ls -la
    - cat .env
    - npm run build
    - pwd
    - tar -czf plandid_backend_stg_artifact.tar.gz *
  artifacts:
    paths:
    - plandid_backend_stg_artifact.tar.gz
    expire_in: 1 hrs 00 min
  only:
    - release/stg

stg_deploy:
  stage: stg_deploy
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - echo "Delploying project..."
    - pwd
    - ls -la 
    - scp -rp plandid_backend_stg_artifact.tar.gz plandid_usr@$DEPLOY_SERVER_IP:/var/www/html/plandid_app/Plandid_backend/stg/
    - ssh plandid_usr@$DEPLOY_SERVER_IP 'bash' < ./scripts/start_stg.sh
    - echo "Deployment complete."
  only:
    - release/stg

